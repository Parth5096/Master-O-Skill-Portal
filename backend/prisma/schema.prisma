generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

enum Difficulty {
  easy
  medium
  hard
}

enum AttemptStatus {
  in_progress
  submitted
  scored
}

model User {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  userUuid     String    @unique @db.Char(36) @default(dbgenerated("UUID()")) @map("user_uuid")
  fullName     String    @db.VarChar(100) @map("full_name")
  email        String    @unique @db.VarChar(255)
  passwordHash String    @db.VarChar(255) @map("password_hash")
  role         Role      @default(user)
  isActive     Boolean   @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  attempts     QuizAttempt[]

  @@index([email])
  @@map("users")
}

model Skill {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  questions   Question[]
  attempts    QuizAttempt[]

  @@map("skills")
}

model Question {
  id            BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  skillId       BigInt     @db.UnsignedBigInt @map("skill_id")
  questionText  String     @db.Text @map("question_text")
  difficulty    Difficulty  @default(medium)
  explanation   String?    @db.Text
  isActive      Boolean    @default(true) @map("is_active")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  skill         Skill      @relation(fields: [skillId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  options       QuestionOption[]
  answers       QuizAnswer[]

  @@index([skillId], map: "idx_questions_skill")
  @@map("questions")
}

model QuestionOption {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  questionId  BigInt   @db.UnsignedBigInt @map("question_id")
  position    Int
  optionText  String   @db.Text @map("option_text")
  isCorrect   Boolean  @default(false) @map("is_correct")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  question    Question @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  answers     QuizAnswer[]

  @@index([questionId], map: "idx_options_question")
  @@index([questionId, isCorrect], map: "idx_options_is_correct")
  @@unique([questionId, position], map: "uq_option_position")
  @@map("question_options")
}

model QuizAttempt {
  id               BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  userId           BigInt        @db.UnsignedBigInt @map("user_id")
  skillId          BigInt        @db.UnsignedBigInt @map("skill_id")
  totalQuestions   Int           @default(0) @map("total_questions")
  correctAnswers   Int           @default(0) @map("correct_answers")
  scorePercent     Decimal       @db.Decimal(5, 2) @default(0.00) @map("score_percent")
  status           AttemptStatus @default(in_progress)
  startedAt        DateTime      @default(now()) @map("started_at")
  submittedAt      DateTime?     @map("submitted_at")
  durationSeconds  Int?          @map("duration_seconds")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  user             User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  skill            Skill         @relation(fields: [skillId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  answers          QuizAnswer[]

  @@index([userId, submittedAt], map: "idx_attempts_user_time")
  @@index([skillId, submittedAt], map: "idx_attempts_skill_time")
  @@map("quiz_attempts")
}

model QuizAnswer {
  id                BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  attemptId         BigInt   @db.UnsignedBigInt @map("attempt_id")
  questionId        BigInt   @db.UnsignedBigInt @map("question_id")
  selectedOptionId  BigInt   @db.UnsignedBigInt @map("selected_option_id")
  isCorrect         Boolean  @default(false) @map("is_correct")
  timeSpentSeconds  Int?     @map("time_spent_seconds")
  answeredAt        DateTime @default(now()) @map("answered_at")

  attempt           QuizAttempt    @relation(fields: [attemptId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  question          Question       @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  selectedOption    QuestionOption @relation(fields: [selectedOptionId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@unique([attemptId, questionId], name: "uq_attempt_question")
  @@index([attemptId], map: "idx_ans_attempt")
  @@index([questionId], map: "idx_ans_question")
  @@map("quiz_answers")
}
